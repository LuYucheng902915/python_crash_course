# 元组就是不可变的列表，你有时候需要创建一系列不可修改的元素，
# 元组可满足这种需求。Python 将不能修改的值称为不可变的

# 元组看起来很像列表，但使用圆括号而不是方括号来标识。定义元组后，
# 就可使用索引来访问其元素，就像访问列表元素一样。
# 如果有一个大小不应改变的矩形，可将其长度和宽度存储在一个元组中

dimensions = (200, 50)
print(dimensions[0])
print(dimensions[1])


# dimensions[0] = 250
# TypeError: 'tuple' object does not support item assignment
# 元组不可变


# 列表的标识非常简单和明确，它的核心就是方括号 []
# 严格地说，元组是由逗号标识的，圆括号只是让元组看起来更整洁、更清晰。
# 如果你要定义只包含一个元素的元组，必须在这个元素后面加上逗号：
# 圆括号 () 的作用：主要是为了分组和提高可读性，避免在复杂的表达式中产生歧义。在大多数情况下，我们都会使用圆括号来明确表示一个元组。
# 逗号的作用：即使没有圆括号，只要有一系列由逗号分隔的值，Python在很多上下文中也会将其默认为一个元组。
# 为什么必须加逗号？因为圆括号 () 在Python中也用于表示数学运算的优先级。
# 如果Python看到 (1)，它无法判断您是想要一个包含数字1的元组，还是仅仅想用括号把数字1括起来。
# 为了消除这种歧义，Python规定，括号内的单个元素不是元组。


my_tuple = (1, 2, 3)
my_tuple_without_parens = 1, 2, 3
print(type(my_tuple))
print(type(my_tuple_without_parens))

wrong_tuple = 1
print(type(wrong_tuple))
correct_tuple = (1,)  # 注意这个关键的逗号！
# correct_tuple = 1, 也可以，但不带括号可读性差
print(type(correct_tuple))

my_t = (3,)

# 创建只包含一个元素的元组通常没有意义，但自动生成的元组有可能只有一个元素。
# 我们写的代码在调用某些函数或库时，这些函数作为返回值，“自动”地创建并交给我们一个元组。
# 这些函数的逻辑决定了它们总是返回一个元组，但元组里元素的数量是根据计算结果动态变化的。
# 我们必须准备好处理那些由其他函数、库或系统被动返回给我们的、只含一个元素的元组。

dimensions = (200, 50)
for dimension in dimensions:
    print(dimension)
# 和列表一样，可以用for遍历元组所有元素
# 对于非修改性操作，元组与list一样，视为一个只读list
# 元组不支持修改性操作，list所有会修改list的方法，元组都没有
# 由于元组不可变，不需要预留空间给append()，使得其占用内存较少，创建也略快
# Python的字典（dict）和集合（set）要求它们的键（key）或元素必须是“可哈希的”（hashable）。简单来说，一个对象在其生命周期内必须是不可变的，才能被哈希。
# 元组是不可变的，所以它是可哈希的，可以作为字典的键或集合的元素。

dimensions = (200, 50)
print("Original dimensions:")
for dimension in dimensions:
    print(dimension)
dimensions = (400, 100)
print("\nModified dimensions:")
for dimension in dimensions:
    print(dimension)
# 虽然不能修改元组的元素，但可以给表示元组的变量赋值。例如，
# 要修改前述矩形的尺寸，可重新定义整个元组：
# 给元组重新赋值（将新元组对象关联到变量）是合法的


# 代码遵循统一格式
# 你编写的程序越来越长，因此有必要学习如何确保代码的格式一致。请花些时间让代码尽可能易于阅读，
# 这有助于你掌握程序是做什么的，也可以帮助他人理解你编写的代码
# Python 程序员会遵循一些格式设置约定。学会编写整洁的 Python 代码后，
# 就能明白他人编写的 Python 代码的整体结构——只要他们和你遵循相同的指南。
# 要提出 Python 语言修改建议，需要编写 Python 增强提案（PythonEnhancement Proposal，PEP）。
# PEP 8 是最古老的 PEP 之一，向 Python 程序员提供了代码格式设置指南。\
# Python 格式设置指南的编写者深知，代码被阅读的次数比被编写的次数多。
# 代码编写出来之后，调试时需要阅读；在给程序添加新功能时，也需要花很长的时间阅读；
# 在与其他程序员共享代码时，他们也会阅读。
# PEP 8 建议每级缩进都使用 4 个空格。这既可提高可读性，又留下了足够的多级缩进空间
# 用制表符（tab）而不是空格来缩进。对于字
# 在字处理文档中，大家常常使用制表符（tab）而不是空格来缩进。对于字处理文档来说，
# 这样做的效果很好，但混合使用制表符和空格会让 Python 解释器感到迷惑。
# 每款文本编辑器都提供了一种设置，可将你输入的制表符转换为指定数量的空格。
# 你可以在编写代码时使用 Tab 键，但是一定要对编辑器进行设置，使其在文档中插入空格而不是制表符。


# 很多 Python 程序员建议每行不超过 80 个字符
# 最初制定这样的指南时，在大多数计算机中，终端窗口每行只能容纳 79 个字符。
# PEP 8 还建议注释的行长不超过 72 个字符，因为有些工具为大型项目自动生成文档时，会在每行注释开头添加格式化字符。
# 在大多数编辑器中，可以设置一个视觉标志（通常是一条竖线），让你知道不能越过的界线在什么地方。


# 要将程序的不同部分分开，可使用空行。你绝对应该使用空行来组织程序文件，
# 但是不要滥用。只要按本书示例展示的那样做，你就能掌握其中的平衡。
# 例如，如果有 5 行创建列表的代码，还有 3 行处理该列表的代码，用一个空行将这两部分隔开是合适的。不应使用三四个空行来将它们隔开。
# 空行不会影响代码的运行，但会影响代码的可读性。Python 解释器根据水平缩进情况来解读代码，但不关心垂直间距
