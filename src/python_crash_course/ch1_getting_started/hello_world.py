print("Hello Python world!")
# exit()命令在Python解释器中使用，用于退出Python解释器回到终端。也可使用Ctrl+D。


# Python解释器的核心功能是读取并执行Python源代码（.py文件）。
# 它是代码与计算机硬件之间的一个“翻译官”和“执行官”，负责将对人类友好的Python语句，转化成计算机可以理解并执行的操作。

# 很多人认为Python是纯粹的“解释型”语言，即读一行、翻译一行、执行一行。
# 但实际上，现代Python（特指CPython，最主流的实现）的机制要更复杂和高效一些，主要分为两步：

# 编译成“字节码” (Compilation to Bytecode)：当第一次运行一个.py文件时，Python解释器首先会进行一个编译步骤。
# 它会检查代码是否有语法错误，然后将其转换成一种更低级的、与平台无关的中间语言，称为“Python字节码”。
# 这个过程的结果通常会以.pyc文件的形式被缓存起来，这样下次再运行时，如果源文件没有改动，就可以跳过这个编译步骤，直接加载字节码，从而提高启动速度。

# 解释执行字节码 (Execution by the PVM)：编译好的字节码并不能直接在CPU上运行。
# 它需要由Python虚拟机（Python Virtual Machine, PVM）来执行。
# PVM是一个巨大的循环，它逐条读取字节码指令，然后在您的计算机上模拟出这些指令对应的操作。这个“解释并执行字节码”的过程，才是Python“解释型”语言特性的真正体现。

# 一般说Python解释器，指的是CPython。
# CPython有两个比较大的缺点，有GIL特性，使得Python 的多线程对于 CPU 密集型（CPU-bound）任务是无效的。
# CPython的虚拟机PVM缺乏成熟的即时编译器 (Just-In-Time, JIT) 和相关的自适应优化技术。
# 这是两个重要缺陷，简单了解。

# CPython是Python语言的官方、标准、也是使用最广泛的实现。从Python官网（python.org）下载并安装的那个Python，就是CPython。
# 它的名字来源于它是用C语言编写的。这正是为什么Python能够方便地与C语言库进行交互，以及为什么很多Python的内置函数性能极高的原因——因为它们的底层就是高效的C代码。
# CPython正是“先编译成字节码，再由虚拟机解释执行”机制的实现者。它包含了编译器和Python虚拟机（PVM）两部分。

# PVM是Python解释器（CPython）的核心执行引擎。
# 可以把PVM想象成一个为了运行Python字节码而虚拟出来的“CPU”。
# 这个虚拟CPU不认识电脑的硬件指令（如Intel或ARM的指令），它只认识一种专门为它设计的语言——Python字节码。
# 它的唯一工作就是接收上一阶段编译好的字节码（Bytecode），然后像一个真正的处理器一样，逐条执行这些字节码指令，最终完成程序的运行。
# PVM的核心工作机制是一个基于“栈”（Stack）的循环。PVM的主循环不断地做三件事：
# 取指令 (Fetch)：从字节码序列中读取下一条指令。
# 解码 (Decode)：分析这条指令是什么意思（是加载一个变量？还是执行一个加法？）。
# 执行 (Execute)：在一个名为“求值栈（Evaluation Stack）”的核心工作区上执行这个操作。
# 几乎所有的计算都是通过在这个栈上推入（push）和弹出（pop）数据来完成的。


# Python一直致力于优化错误提示信息，你在运行代码过程中得到的错误提示信息可能与书中提供的不同。
